// <auto-generated/>
#pragma warning disable 0067, 0108, 0618
[assembly: global::Microsoft.Stubs.Framework.StubsAssembly("Void.Core")]
namespace Void.IO.Stubs
{
    /// <summary>Mole type of <see cref="Void.IO.DirectoryExtensions"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.IO.DirectoryExtensions))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : DirectoryExtensions")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MDirectoryExtensions
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MDirectoryExtensions()
        : base(typeof(global::Void.IO.DirectoryExtensions))
        {
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.IO.DirectoryExtensions.AsDirectory(System.String)"/>.</para>
        ///             Called on <paramref name="path"/> return a DirectoryInfo instance
        ///             pointed at that path.
        ///             </summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Func<string, global::System.IO.DirectoryInfo> AsDirectoryString
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("AsDirectory", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicStatic
                    ((global::System.Delegate)value, typeof(global::Void.IO.DirectoryExtensions), "AsDirectory", typeof(string));
            }
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.IO.DirectoryExtensions.DeleteRecursive(System.IO.DirectoryInfo)"/>.</para>
        ///             Recursively deletes everything in a airectory and the directory itself.
        /// 
        ///             A more intuitive alias for <see cref="M:System.IO.DirectoryInfo.Delete(System.Boolean)"/>
        ///             called with <paramref name="me"/> and true.
        ///             </summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Action<global::System.IO.DirectoryInfo> DeleteRecursiveDirectoryInfo
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("DeleteRecursive", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicStatic
                    ((global::System.Delegate)value, typeof(global::Void.IO.DirectoryExtensions), "DeleteRecursive", typeof(global::System.IO.DirectoryInfo));
            }
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.IO.Stubs.MDirectoryExtensions.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.IO.DirectoryExtensions), value);
            }
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.IO.DirectoryExtensions.Size(System.IO.DirectoryInfo)"/>.</para>
        ///             Returns the size of the directory.
        ///             </summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.IO.DirectoryInfo, long> SizeDirectoryInfo
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("Size", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicStatic
                    ((global::System.Delegate)value, typeof(global::Void.IO.DirectoryExtensions), "Size", typeof(global::System.IO.DirectoryInfo));
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.IO.DirectoryExtensions.&lt;Size&gt;b__0(System.String)"/>
        /// </summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Func<string, global::System.Collections.Generic.IEnumerable<string>> _Sizeb__0String
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("<Size>b__0", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubNonPublicStatic
                    ((global::System.Delegate)value, typeof(global::Void.IO.DirectoryExtensions), "<Size>b__0", typeof(string));
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.IO.DirectoryExtensions.&lt;Size&gt;b__1(System.String)"/>
        /// </summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Func<string, long> _Sizeb__1String
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("<Size>b__1", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubNonPublicStatic
                    ((global::System.Delegate)value, typeof(global::Void.IO.DirectoryExtensions), "<Size>b__1", typeof(string));
            }
        }
    }
}
namespace Void.Stubs
{
    /// <summary>Mole type of <see cref="Void.EnumExtensions"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.EnumExtensions))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : EnumExtensions")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MEnumExtensions
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MEnumExtensions()
        : base(typeof(global::Void.EnumExtensions))
        {
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Stubs.MEnumExtensions.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.EnumExtensions), value);
            }
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.EnumExtensions.HasFlag(System.Enum,System.Enum)"/>.</para>
        ///             True if <paramref name="value"/> contains the bit flag <paramref name="flag"/></summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Enum, global::System.Enum, bool> HasFlagEnumEnum
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("HasFlag", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicStatic((global::System.Delegate)value, typeof(global::Void.EnumExtensions), 
                "HasFlag", typeof(global::System.Enum), typeof(global::System.Enum));
            }
        }
    }
}
namespace Void.Linq.Stubs
{
    /// <summary>Mole type of <see cref="Void.Linq.Filter"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Linq.Filter))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : Filter")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MFilter
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MFilter()
        : base(typeof(global::Void.Linq.Filter))
        {
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Linq.Stubs.MFilter.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Linq.Filter), value);
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Filter.Matches``1(Void.Linq.IFilter`1{``0},``0)"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Matches", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void MatchesIFilter0T<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::Void.Linq.IFilter<T>, T, bool> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Filter), "Matches", gma, typeof(global::Void.Linq.IFilter<T>), typeof(T));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Filter.Where``1(System.Collections.Generic.IEnumerable`1{``0},Void.Linq.IFilter`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Where", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void WhereIEnumerable0IFilter0<TItemType>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<TItemType>, global::Void.Linq.IFilter<TItemType>, global::System.Collections.Generic.IEnumerable<TItemType>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(TItemType);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Filter), "Where", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<TItemType>), typeof(global::Void.Linq.IFilter<TItemType>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Filter.Where``1(System.Linq.IQueryable`1{``0},Void.Linq.IFilter`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Where", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void WhereIQueryable0IFilter0<TItemType>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Linq.IQueryable<TItemType>, global::Void.Linq.IFilter<TItemType>, global::System.Linq.IQueryable<TItemType>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(TItemType);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Filter), "Where", 
                gma, typeof(global::System.Linq.IQueryable<TItemType>), typeof(global::Void.Linq.IFilter<TItemType>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Filter.&lt;Where&gt;b__0``1(System.Collections.Generic.IEnumerable`1{``0},System.Linq.Expressions.Expression`1{System.Func`2{``0,System.Boolean}})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("<Where>b__0", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        public static void _Whereb__0IEnumerable0ExpressionFunc0Boolean<TItemType>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<TItemType>, global::System.Linq.Expressions.Expression<global::System.Func<TItemType, bool>>, global::System.Collections.Generic.IEnumerable<TItemType>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(TItemType);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubNonPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Filter), "<Where>b__0", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<TItemType>), 
                typeof(global::System.Linq.Expressions.Expression<global::System.Func<TItemType, bool>>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Filter.&lt;Where&gt;b__1``1(System.Linq.IQueryable`1{``0},System.Linq.Expressions.Expression`1{System.Func`2{``0,System.Boolean}})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("<Where>b__1", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        public static void _Whereb__1IQueryable0ExpressionFunc0Boolean<TItemType>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Linq.IQueryable<TItemType>, global::System.Linq.Expressions.Expression<global::System.Func<TItemType, bool>>, global::System.Linq.IQueryable<TItemType>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(TItemType);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubNonPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Filter), "<Where>b__1", 
                gma, typeof(global::System.Linq.IQueryable<TItemType>), 
                typeof(global::System.Linq.Expressions.Expression<global::System.Func<TItemType, bool>>));
        }
    }
}
namespace Void.Wrappers.Stubs
{
    /// <summary>Mole type of <see cref="Void.Wrappers.GenericWrapper`1`1"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Wrappers.GenericWrapper<>))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : GenericWrapper`1")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class MGenericWrapper<T01>
      : global::Microsoft.Stubs.Framework.MoleBase<global::Void.Wrappers.GenericWrapper<T01>>
    {
        /// <summary>Initializes a new mole</summary>
        public MGenericWrapper()
        : base()
        {
        }

        /// <summary>Initializes a new mole for the given instance</summary>
        public MGenericWrapper(global::Void.Wrappers.GenericWrapper<T01> instance)
        : base(instance)
        {
        }

        /// <summary>Define moles for all instances members</summary>
        public static partial class AllInstances
        {
            /// <summary>Sets the mole of <see cref="P:Void.Wrappers.GenericWrapper`1`1.Wrapped"/>
            /// </summary>
            public static global::Microsoft.Stubs.Framework.StubDelegates.Func<global::Void.Wrappers.GenericWrapper<T01>, T01> WrappedGet
            {
                [global::Microsoft.Stubs.Framework.MoleMethod("get_Wrapped", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
                set
                {
                    global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance
                        ((global::System.Delegate)value, typeof(global::Void.Wrappers.GenericWrapper<T01>), (object)null, "get_Wrapped");
                }
            }

            /// <summary>Sets the mole of <see cref="P:Void.Wrappers.GenericWrapper`1`1.Wrapped"/>
            /// </summary>
            public static global::Microsoft.Stubs.Framework.StubDelegates.Action<global::Void.Wrappers.GenericWrapper<T01>, T01> WrappedSetT
            {
                [global::Microsoft.Stubs.Framework.MoleMethod("set_Wrapped", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
                set
                {
                    global::Microsoft.Stubs.Framework.MoleRuntime.SetStubNonPublicInstance
                        ((global::System.Delegate)value, typeof(global::Void.Wrappers.GenericWrapper<T01>), (object)null, "set_Wrapped", typeof(T01));
                }
            }
        }

        /// <summary>Binds the members of the interface to the mole.</summary>
        public global::Void.Wrappers.Stubs.MGenericWrapper<T01> Bind(global::Void.Wrappers.IWrapper<T01> target)
        {
            global::Microsoft.Stubs.Framework.MoleRuntime
              .Bind<global::Void.Wrappers.GenericWrapper<T01>, global::Void.Wrappers.Stubs.MGenericWrapper<T01>, global::Void.Wrappers.IWrapper<T01>>
                (this, target);
            return this;
        }

        /// <summary>Sets the mole of <see cref="M:Void.Wrappers.GenericWrapper`1`1.#ctor(`1)"/>
        /// </summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Action<global::Void.Wrappers.GenericWrapper<T01>, T01> ConstructorT
        {
            [global::Microsoft.Stubs.Framework.MoleMethod(".ctor", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance
                    ((global::System.Delegate)value, typeof(global::Void.Wrappers.GenericWrapper<T01>), (object)null, ".ctor", typeof(T01));
            }
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Wrappers.Stubs.MGenericWrapper<T01>.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Wrappers.GenericWrapper<T01>), value);
            }
        }

        /// <summary>Sets the mole of <see cref="P:Void.Wrappers.GenericWrapper`1`1.Wrapped"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<T01> WrappedGet
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("get_Wrapped", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance((global::System.Delegate)
                  (global::Microsoft.Stubs.Framework.StubExtensions.UnCurry<global::Void.Wrappers.GenericWrapper<T01>, T01>(value)), 
                typeof(global::Void.Wrappers.GenericWrapper<T01>), base.Instance, "get_Wrapped");
            }
        }

        /// <summary>Sets the mole of <see cref="P:Void.Wrappers.GenericWrapper`1`1.Wrapped"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<T01> WrappedSetT
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("set_Wrapped", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubNonPublicInstance((global::System.Delegate)
                  (global::Microsoft.Stubs.Framework.StubExtensions.UnCurry<global::Void.Wrappers.GenericWrapper<T01>, T01>(value)), 
                typeof(global::Void.Wrappers.GenericWrapper<T01>), base.Instance, "set_Wrapped", typeof(T01));
            }
        }
    }
}
namespace Void.Linq.Stubs
{
    /// <summary>Mole type of <see cref="Void.Linq.Hierarchy"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Linq.Hierarchy))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : Hierarchy")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MHierarchy
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MHierarchy()
        : base(typeof(global::Void.Linq.Hierarchy))
        {
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Linq.Stubs.MHierarchy.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Linq.Hierarchy), value);
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Hierarchy.FlattenHierarchy``1(System.Collections.Generic.IEnumerable`1{``0},System.Func`2{``0,System.Collections.Generic.IEnumerable`1{``0}})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("FlattenHierarchy", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void FlattenHierarchyIEnumerable0Func0IEnumerable0<TSource>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<TSource>, global::System.Func<TSource, global::System.Collections.Generic.IEnumerable<TSource>>, global::System.Collections.Generic.IEnumerable<TSource>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(TSource);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Hierarchy), "FlattenHierarchy", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<TSource>), 
                typeof(global::System.Func<TSource, global::System.Collections.Generic.IEnumerable<TSource>>));
        }
    }
}
namespace Void.Hierarchies.Stubs
{
    /// <summary>Mole type of <see cref="Void.Hierarchies.HierarchyExtensions"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Hierarchies.HierarchyExtensions))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : HierarchyExtensions")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MHierarchyExtensions
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MHierarchyExtensions()
        : base(typeof(global::Void.Hierarchies.HierarchyExtensions))
        {
        }

        /// <summary>Sets the mole of <see cref="M:Void.Hierarchies.HierarchyExtensions.AsHierarchy``1(``0,System.Func`2{``0,System.Collections.Generic.IEnumerable`1{``0}})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("AsHierarchy", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void AsHierarchyTFunc0IEnumerable0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<T, global::System.Func<T, global::System.Collections.Generic.IEnumerable<T>>, global::Void.Hierarchies.IAutoHierarchy<T>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Hierarchies.HierarchyExtensions), "AsHierarchy", 
                gma, typeof(T), typeof(global::System.Func<T, global::System.Collections.Generic.IEnumerable<T>>));
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Hierarchies.Stubs.MHierarchyExtensions.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Hierarchies.HierarchyExtensions), value);
            }
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.Hierarchies.HierarchyExtensions.Flatten``1(``0)"/>.</para>
        ///             Returns <paramref name="root"/> and all the objects in the hierarchy
        ///             below <paramref name="root"/> flattened into a sequence
        ///             </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Flatten", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void FlattenT<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<T, global::System.Collections.Generic.IEnumerable<T>> mole)
            where T : global::Void.Hierarchies.IHierarchy<T>
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Hierarchies.HierarchyExtensions), "Flatten", gma, typeof(T));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Hierarchies.HierarchyExtensions.Unwrap``1(System.Collections.Generic.IEnumerable`1{Void.Hierarchies.IAutoHierarchy`1{``0}})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Unwrap", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void UnwrapIEnumerableIAutoHierarchy0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<global::Void.Hierarchies.IAutoHierarchy<T>>, global::System.Collections.Generic.IEnumerable<T>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Hierarchies.HierarchyExtensions), 
                "Unwrap", gma, typeof(global::System.Collections.Generic.IEnumerable<global::Void.Hierarchies.IAutoHierarchy<T>>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Hierarchies.HierarchyExtensions.&lt;Flatten&gt;b__0``1(``0)"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("<Flatten>b__0", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        public static void _Flattenb__0T<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<T, global::System.Collections.Generic.IEnumerable<T>> mole)
            where T : global::Void.Hierarchies.IHierarchy<T>
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubNonPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Hierarchies.HierarchyExtensions), "<Flatten>b__0", gma, typeof(T));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Hierarchies.HierarchyExtensions.&lt;Unwrap&gt;b__1``1(Void.Hierarchies.IAutoHierarchy`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("<Unwrap>b__1", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        public static void _Unwrapb__1IAutoHierarchy0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::Void.Hierarchies.IAutoHierarchy<T>, T> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubNonPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Hierarchies.HierarchyExtensions), 
                "<Unwrap>b__1", gma, typeof(global::Void.Hierarchies.IAutoHierarchy<T>));
        }
    }
}
namespace Void.Linq.Stubs
{
    /// <summary>Mole type of <see cref="Void.Linq.Iteration"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Linq.Iteration))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : Iteration")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MIteration
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MIteration()
        : base(typeof(global::Void.Linq.Iteration))
        {
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Linq.Stubs.MIteration.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Linq.Iteration), value);
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Iteration.ForEach``1(System.Collections.Generic.IEnumerable`1{``0},System.Action`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("ForEach", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void ForEachIEnumerable0Action0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Action<global::System.Collections.Generic.IEnumerable<T>, global::System.Action<T>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Iteration), "ForEach", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<T>), typeof(global::System.Action<T>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Iteration.ForEach``1(System.Collections.Generic.IEnumerable`1{``0},System.Action`2{``0,System.Int32})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("ForEach", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void ForEachIEnumerable0Action0Int32<T>(global::Microsoft.Stubs.Framework.StubDelegates.Action<global::System.Collections.Generic.IEnumerable<T>, global::System.Action<T, int>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Iteration), "ForEach", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<T>), typeof(global::System.Action<T, int>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Iteration.ForEach``2(System.Collections.Generic.IEnumerable`1{``0},System.Func`2{``0,``1})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("ForEach", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void ForEachIEnumerable0Func01<TSource,TReturn>(global::Microsoft.Stubs.Framework.StubDelegates.Action<global::System.Collections.Generic.IEnumerable<TSource>, global::System.Func<TSource, TReturn>> mole)
        {
            global::System.Type[] gma = new global::System.Type[2];
            gma[0] = typeof(TSource);
            gma[1] = typeof(TReturn);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Iteration), "ForEach", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<TSource>), typeof(global::System.Func<TSource, TReturn>));
        }
    }
}
namespace Void.Linq.Stubs
{
    /// <summary>Mole type of <see cref="Void.Linq.LinqExtensions"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Linq.LinqExtensions))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : LinqExtensions")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MLinqExtensions
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MLinqExtensions()
        : base(typeof(global::Void.Linq.LinqExtensions))
        {
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.LinqExtensions.Append``1(System.Collections.Generic.IEnumerable`1{``0},``0[])"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Append", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void AppendIEnumerable00<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, T[], global::System.Collections.Generic.IEnumerable<T>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.LinqExtensions), "Append", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<T>), typeof(T[]));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.LinqExtensions.ChopIntoSizesOf``1(System.Collections.Generic.IEnumerable`1{``0},System.Int32)"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("ChopIntoSizesOf", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void ChopIntoSizesOfIEnumerable0Int32<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, int, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.IEnumerable<T>>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.LinqExtensions), "ChopIntoSizesOf", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<T>), typeof(int));
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Linq.Stubs.MLinqExtensions.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Linq.LinqExtensions), value);
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.LinqExtensions.Flatten``2(System.Collections.Generic.IEnumerable`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Flatten", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void FlattenIEnumerable0<T,TChild>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, global::System.Collections.Generic.IEnumerable<TChild>> mole)
            where T : global::System.Collections.Generic.IEnumerable<TChild>
        {
            global::System.Type[] gma = new global::System.Type[2];
            gma[0] = typeof(T);
            gma[1] = typeof(TChild);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.LinqExtensions), 
                "Flatten", gma, typeof(global::System.Collections.Generic.IEnumerable<T>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.LinqExtensions.Let``2(System.Collections.Generic.IEnumerable`1{``0},System.Func`2{System.Collections.Generic.IEnumerable`1{``0},System.Collections.Generic.IEnumerable`1{``1}})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Let", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void LetIEnumerable0Func2IEnumerable0IEnumerable1<TSource,TResult>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<TSource>, global::System.Func<global::System.Collections.Generic.IEnumerable<TSource>, global::System.Collections.Generic.IEnumerable<TResult>>, global::System.Collections.Generic.IEnumerable<TResult>> mole)
        {
            global::System.Type[] gma = new global::System.Type[2];
            gma[0] = typeof(TSource);
            gma[1] = typeof(TResult);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.LinqExtensions), "Let", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<TSource>), typeof(global::System
                  .Func<global::System.Collections.Generic.IEnumerable<TSource>, global::System.Collections.Generic.IEnumerable<TResult>>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.LinqExtensions.None``1(System.Collections.Generic.IEnumerable`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("None", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void NoneIEnumerable0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, bool> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.LinqExtensions), 
                "None", gma, typeof(global::System.Collections.Generic.IEnumerable<T>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.LinqExtensions.None``1(System.Collections.Generic.IEnumerable`1{``0},System.Func`2{``0,System.Boolean})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("None", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void NoneIEnumerable0Func0Boolean<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, global::System.Func<T, bool>, bool> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.LinqExtensions), "None", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<T>), typeof(global::System.Func<T, bool>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.LinqExtensions.&lt;Flatten&gt;b__7``2(``0)"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("<Flatten>b__7", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        public static void _Flattenb__7T<T,TChild>(global::Microsoft.Stubs.Framework.StubDelegates.Func<T, global::System.Collections.Generic.IEnumerable<TChild>> mole)
            where T : global::System.Collections.Generic.IEnumerable<TChild>
        {
            global::System.Type[] gma = new global::System.Type[2];
            gma[0] = typeof(T);
            gma[1] = typeof(TChild);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubNonPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.LinqExtensions), "<Flatten>b__7", gma, typeof(T));
        }
    }
}
namespace Void.Linq.Stubs
{
    /// <summary>Mole type of <see cref="Void.Linq.Number"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Linq.Number))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : Number")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MNumber
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MNumber()
        : base(typeof(global::Void.Linq.Number))
        {
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.Linq.Number.By(System.Int32,System.Int32)"/>.</para>
        ///             generates a sequence of integers beginning with <paramref name="me"/> where each element is
        ///             <paramref name="stepsize"/> larger than the previous
        ///             </summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Func<int, int, global::Void.Linq.Number.IterationSpecification> ByInt32Int32
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("By", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicStatic
                    ((global::System.Delegate)value, typeof(global::Void.Linq.Number), "By", typeof(int), typeof(int));
            }
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Linq.Stubs.MNumber.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Linq.Number), value);
            }
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.Linq.Number.Through(System.Int32,System.Int32)"/>.</para>
        ///             generates a sequence of integers beginning with <paramref name="me"/> where each element is
        ///             the previous element plus one that includes the upper bound <paramref name="guard"/> cref=&quot;guard&quot;/&gt;
        ///             </summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Func<int, int, global::System.Collections.Generic.IEnumerable<int>> ThroughInt32Int32
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("Through", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicStatic
                    ((global::System.Delegate)value, typeof(global::Void.Linq.Number), "Through", typeof(int), typeof(int));
            }
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.Linq.Number.Through(Void.Linq.Number.IterationSpecification,System.Int32)"/>.</para>
        ///             Returns as sequence that will yield all values to and including <paramref name="guard"/></summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Func<global::Void.Linq.Number.IterationSpecification, int, global::System.Collections.Generic.IEnumerable<int>> ThroughIterationSpecificationInt32
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("Through", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicStatic((global::System.Delegate)value, typeof(global::Void.Linq.Number), 
                "Through", typeof(global::Void.Linq.Number.IterationSpecification), typeof(int));
            }
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.Linq.Number.Until(System.Int32,System.Int32)"/>.</para>
        ///             generates a sequence of integers beginning with <paramref name="me"/> where each element is
        ///             the previous element plus one that excludes the upper bound <paramref name="guard"/></summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Func<int, int, global::System.Collections.Generic.IEnumerable<int>> UntilInt32Int32
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("Until", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicStatic
                    ((global::System.Delegate)value, typeof(global::Void.Linq.Number), "Until", typeof(int), typeof(int));
            }
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.Linq.Number.Until(Void.Linq.Number.IterationSpecification,System.Int32)"/>.</para>
        ///             Returns as sequence that will yield all values to but excluding <paramref name="guard"/></summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Func<global::Void.Linq.Number.IterationSpecification, int, global::System.Collections.Generic.IEnumerable<int>> UntilIterationSpecificationInt32
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("Until", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicStatic((global::System.Delegate)value, typeof(global::Void.Linq.Number), 
                "Until", typeof(global::Void.Linq.Number.IterationSpecification), typeof(int));
            }
        }
    }
}
namespace Void.Stubs
{
    /// <summary>Mole type of <see cref="Void.ObjectExtensions"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.ObjectExtensions))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : ObjectExtensions")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MObjectExtensions
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MObjectExtensions()
        : base(typeof(global::Void.ObjectExtensions))
        {
        }

        /// <summary>Sets the mole of <see cref="M:Void.ObjectExtensions.Do``1(``0,System.Action`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Do", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void DoTAction0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Action<T, global::System.Action<T>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.ObjectExtensions), "Do", gma, typeof(T), typeof(global::System.Action<T>));
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Stubs.MObjectExtensions.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.ObjectExtensions), value);
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.ObjectExtensions.Transform``2(``0,System.Func`2{``0,``1})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Transform", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void TransformTSourceFunc01<TSource,TReturn>(global::Microsoft.Stubs.Framework.StubDelegates.Func<TSource, global::System.Func<TSource, TReturn>, TReturn> mole)
        {
            global::System.Type[] gma = new global::System.Type[2];
            gma[0] = typeof(TSource);
            gma[1] = typeof(TReturn);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.ObjectExtensions), "Transform", 
                gma, typeof(TSource), typeof(global::System.Func<TSource, TReturn>));
        }
    }
}
namespace Void.Linq.Stubs
{
    /// <summary>Mole type of <see cref="Void.Linq.ObjectExtensions"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Linq.ObjectExtensions))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : ObjectExtensions")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MObjectExtensions01
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MObjectExtensions01()
        : base(typeof(global::Void.Linq.ObjectExtensions))
        {
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Linq.Stubs.MObjectExtensions01.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Linq.ObjectExtensions), value);
            }
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.Linq.ObjectExtensions.Repeat``1(``0,System.Int32)"/>.</para>
        ///             Returns <paramref name="me"/> repeated <paramref name="times"/> times.
        ///             </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Repeat", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void RepeatTInt32<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<T, int, global::System.Collections.Generic.IEnumerable<T>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.ObjectExtensions), "Repeat", gma, typeof(T), typeof(int));
        }
    }
}
namespace Void.Stubs
{
    /// <summary>Mole type of <see cref="Void.PersistentEntity`1`1"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.PersistentEntity<>))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : PersistentEntity`1")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class MPersistentEntity<TEntity01>
      : global::Microsoft.Stubs.Framework.MoleBase<global::Void.PersistentEntity<TEntity01>>
        where TEntity01 : global::Void.PersistentEntity<TEntity01>
    {
        /// <summary>Initializes a new mole</summary>
        public MPersistentEntity()
        : base()
        {
        }

        /// <summary>Initializes a new mole for the given instance</summary>
        public MPersistentEntity(global::Void.PersistentEntity<TEntity01> instance)
        : base(instance)
        {
        }

        /// <summary>Define moles for all instances members</summary>
        public static partial class AllInstances
        {
            /// <summary>Sets the mole of <see cref="M:Void.PersistentEntity`1`1.Equals(System.Object)"/>
            /// </summary>
            public static global::Microsoft.Stubs.Framework.StubDelegates.Func<global::Void.PersistentEntity<TEntity01>, object, bool> EqualsObject
            {
                [global::Microsoft.Stubs.Framework.MoleMethod("Equals", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
                set
                {
                    global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance
                        ((global::System.Delegate)value, typeof(global::Void.PersistentEntity<TEntity01>), (object)null, "Equals", typeof(object));
                }
            }

            /// <summary>Sets the mole of <see cref="M:Void.PersistentEntity`1`1.Equals(`1)"/>
            /// </summary>
            public static global::Microsoft.Stubs.Framework.StubDelegates.Func<global::Void.PersistentEntity<TEntity01>, TEntity01, bool> EqualsTEntity
            {
                [global::Microsoft.Stubs.Framework.MoleMethod("Equals", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
                set
                {
                    global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance
                        ((global::System.Delegate)value, typeof(global::Void.PersistentEntity<TEntity01>), (object)null, "Equals", typeof(TEntity01));
                }
            }

            /// <summary>Sets the mole of <see cref="M:Void.PersistentEntity`1`1.GetHashCode"/>
            /// </summary>
            public static global::Microsoft.Stubs.Framework.StubDelegates.Func<global::Void.PersistentEntity<TEntity01>, int> GetHashCode
            {
                [global::Microsoft.Stubs.Framework.MoleMethod("GetHashCode", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
                set
                {
                    global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance
                        ((global::System.Delegate)value, typeof(global::Void.PersistentEntity<TEntity01>), (object)null, "GetHashCode");
                }
            }

            /// <summary>Sets the mole of <see cref="P:Void.PersistentEntity`1`1.Id"/>
            /// </summary>
            public static global::Microsoft.Stubs.Framework.StubDelegates.Func<global::Void.PersistentEntity<TEntity01>, global::System.Guid> IdGet
            {
                [global::Microsoft.Stubs.Framework.MoleMethod("get_Id", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
                set
                {
                    global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance
                        ((global::System.Delegate)value, typeof(global::Void.PersistentEntity<TEntity01>), (object)null, "get_Id");
                }
            }

            /// <summary>Sets the mole of <see cref="P:Void.PersistentEntity`1`1.Id"/>
            /// </summary>
            public static global::Microsoft.Stubs.Framework.StubDelegates.Action<global::Void.PersistentEntity<TEntity01>, global::System.Guid> IdSetGuid
            {
                [global::Microsoft.Stubs.Framework.MoleMethod("set_Id", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
                set
                {
                    global::Microsoft.Stubs.Framework.MoleRuntime.SetStubNonPublicInstance
                        ((global::System.Delegate)value, typeof(global::Void.PersistentEntity<TEntity01>), (object)null, "set_Id", typeof(global::System.Guid));
                }
            }
        }

        /// <summary>Binds the members of the interface to the mole.</summary>
        public global::Void.Stubs.MPersistentEntity<TEntity01> Bind(global::Void.IPersistentEntity<global::System.Guid> target)
        {
            global::Microsoft.Stubs.Framework.MoleRuntime.Bind<global::Void.PersistentEntity<TEntity01>, 
            global::Void.Stubs.MPersistentEntity<TEntity01>, global::Void.IPersistentEntity<global::System.Guid>>(this, target);
            return this;
        }

        /// <summary>Binds the members of the interface to the mole.</summary>
        public global::Void.Stubs.MPersistentEntity<TEntity01> Bind(global::System.IEquatable<TEntity01> target)
        {
            global::Microsoft.Stubs.Framework.MoleRuntime
              .Bind<global::Void.PersistentEntity<TEntity01>, global::Void.Stubs.MPersistentEntity<TEntity01>, global::System.IEquatable<TEntity01>>
                (this, target);
            return this;
        }

        /// <summary>Sets the mole of <see cref="M:Void.PersistentEntity`1`1.#ctor"/>
        /// </summary>
        public static global::Microsoft.Stubs.Framework.StubDelegates.Action<global::Void.PersistentEntity<TEntity01>> Constructor
        {
            [global::Microsoft.Stubs.Framework.MoleMethod(".ctor", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance
                    ((global::System.Delegate)value, typeof(global::Void.PersistentEntity<TEntity01>), (object)null, ".ctor");
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.PersistentEntity`1`1.Equals(System.Object)"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<object, bool> EqualsObject
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("Equals", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance((global::System.Delegate)
                  (global::Microsoft.Stubs.Framework.StubExtensions.UnCurry<global::Void.PersistentEntity<TEntity01>, object, bool>(value)), 
                typeof(global::Void.PersistentEntity<TEntity01>), base.Instance, "Equals", typeof(object));
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.PersistentEntity`1`1.Equals(`1)"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<TEntity01, bool> EqualsTEntity
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("Equals", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance((global::System.Delegate)
                  (global::Microsoft.Stubs.Framework.StubExtensions.UnCurry<global::Void.PersistentEntity<TEntity01>, TEntity01, bool>(value)), 
                typeof(global::Void.PersistentEntity<TEntity01>), base.Instance, "Equals", typeof(TEntity01));
            }
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Stubs.MPersistentEntity<TEntity01>.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.PersistentEntity<TEntity01>), value);
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.PersistentEntity`1`1.GetHashCode"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<int> GetHashCode
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("GetHashCode", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance((global::System.Delegate)
                  (global::Microsoft.Stubs.Framework.StubExtensions.UnCurry<global::Void.PersistentEntity<TEntity01>, int>(value)), 
                typeof(global::Void.PersistentEntity<TEntity01>), base.Instance, "GetHashCode");
            }
        }

        /// <summary>Sets the mole of <see cref="P:Void.PersistentEntity`1`1.Id"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Guid> IdGet
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("get_Id", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicInstance)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubPublicInstance((global::System.Delegate)
                  (global::Microsoft.Stubs.Framework.StubExtensions.UnCurry<global::Void.PersistentEntity<TEntity01>, global::System.Guid>(value)), 
                typeof(global::Void.PersistentEntity<TEntity01>), base.Instance, "get_Id");
            }
        }

        /// <summary>Sets the mole of <see cref="P:Void.PersistentEntity`1`1.Id"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Action<global::System.Guid> IdSetGuid
        {
            [global::Microsoft.Stubs.Framework.MoleMethod("set_Id", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicInstance)]
            set
            {
                global::Microsoft.Stubs.Framework.MoleRuntime.SetStubNonPublicInstance((global::System.Delegate)
                  (global::Microsoft.Stubs.Framework.StubExtensions.UnCurry<global::Void.PersistentEntity<TEntity01>, global::System.Guid>(value)), 
                typeof(global::Void.PersistentEntity<TEntity01>), base.Instance, "set_Id", typeof(global::System.Guid));
            }
        }
    }
}
namespace Void.Linq.Stubs
{
    /// <summary>Mole type of <see cref="Void.Linq.Seq"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Linq.Seq))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : Seq")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MSeq
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MSeq()
        : base(typeof(global::Void.Linq.Seq))
        {
        }

        /// <summary><para>Sets the mole of <see cref="M:Void.Linq.Seq.Create``1(``0[])"/>.</para>
        ///             Creates an enumerable consisting of the passed parameter values is order.
        ///             </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Create", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void Create0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<T[], global::System.Collections.Generic.IEnumerable<T>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Seq), "Create", gma, typeof(T[]));
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Linq.Stubs.MSeq.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Linq.Seq), value);
            }
        }
    }
}
namespace Void.Linq.Stubs
{
    /// <summary>Mole type of <see cref="Void.Linq.SimpleIndexing"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Linq.SimpleIndexing))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : SimpleIndexing")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MSimpleIndexing
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MSimpleIndexing()
        : base(typeof(global::Void.Linq.SimpleIndexing))
        {
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.SimpleIndexing.Eighth``1(System.Collections.Generic.IEnumerable`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Eighth", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void EighthIEnumerable0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, T> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.SimpleIndexing), 
                "Eighth", gma, typeof(global::System.Collections.Generic.IEnumerable<T>));
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Linq.Stubs.MSimpleIndexing.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Linq.SimpleIndexing), value);
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.SimpleIndexing.Fifth``1(System.Collections.Generic.IEnumerable`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Fifth", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void FifthIEnumerable0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, T> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.SimpleIndexing), 
                "Fifth", gma, typeof(global::System.Collections.Generic.IEnumerable<T>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.SimpleIndexing.Fourth``1(System.Collections.Generic.IEnumerable`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Fourth", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void FourthIEnumerable0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, T> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.SimpleIndexing), 
                "Fourth", gma, typeof(global::System.Collections.Generic.IEnumerable<T>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.SimpleIndexing.Ninth``1(System.Collections.Generic.IEnumerable`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Ninth", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void NinthIEnumerable0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, T> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.SimpleIndexing), 
                "Ninth", gma, typeof(global::System.Collections.Generic.IEnumerable<T>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.SimpleIndexing.Second``1(System.Collections.Generic.IEnumerable`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Second", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void SecondIEnumerable0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, T> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.SimpleIndexing), 
                "Second", gma, typeof(global::System.Collections.Generic.IEnumerable<T>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.SimpleIndexing.Seventh``1(System.Collections.Generic.IEnumerable`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Seventh", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void SeventhIEnumerable0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, T> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.SimpleIndexing), 
                "Seventh", gma, typeof(global::System.Collections.Generic.IEnumerable<T>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.SimpleIndexing.Sixth``1(System.Collections.Generic.IEnumerable`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Sixth", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void SixthIEnumerable0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, T> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.SimpleIndexing), 
                "Sixth", gma, typeof(global::System.Collections.Generic.IEnumerable<T>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.SimpleIndexing.Third``1(System.Collections.Generic.IEnumerable`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Third", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void ThirdIEnumerable0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T>, T> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.SimpleIndexing), 
                "Third", gma, typeof(global::System.Collections.Generic.IEnumerable<T>));
        }
    }
}
namespace Void.Wrappers.Stubs
{
    /// <summary>Mole type of <see cref="Void.Wrappers.WrapperExtensions"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Wrappers.WrapperExtensions))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : WrapperExtensions")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MWrapperExtensions
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MWrapperExtensions()
        : base(typeof(global::Void.Wrappers.WrapperExtensions))
        {
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Wrappers.Stubs.MWrapperExtensions.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Wrappers.WrapperExtensions), value);
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.Wrappers.WrapperExtensions.Unwrap``1(System.Collections.Generic.IEnumerable`1{Void.Wrappers.IWrapper`1{``0}})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Unwrap", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void UnwrapIEnumerableIWrapper0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<global::Void.Wrappers.IWrapper<T>>, global::System.Collections.Generic.IEnumerable<T>> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Wrappers.WrapperExtensions), 
                "Unwrap", gma, typeof(global::System.Collections.Generic.IEnumerable<global::Void.Wrappers.IWrapper<T>>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Wrappers.WrapperExtensions.&lt;Unwrap&gt;b__0``1(Void.Wrappers.IWrapper`1{``0})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("<Unwrap>b__0", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        public static void _Unwrapb__0IWrapper0<T>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::Void.Wrappers.IWrapper<T>, T> mole)
        {
            global::System.Type[] gma = new global::System.Type[1];
            gma[0] = typeof(T);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubNonPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Wrappers.WrapperExtensions), 
                "<Unwrap>b__0", gma, typeof(global::Void.Wrappers.IWrapper<T>));
        }
    }
}
namespace Void.Linq.Stubs
{
    /// <summary>Mole type of <see cref="Void.Linq.Zipping"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.MoleClass(typeof(global::Void.Linq.Zipping))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Diagnostics.DebuggerDisplay("Mole : Zipping")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public sealed partial class MZipping
      : global::Microsoft.Stubs.Framework.MoleBase
    {
        /// <summary>Initializes a new instance</summary>
        private MZipping()
        : base(typeof(global::Void.Linq.Zipping))
        {
        }

        /// <summary>Assigns the &apos;NotImplemented&apos; fallback behavior for all methods of the moled type</summary>
        public static void FallbackAsNotImplemented()
        {
            global::Void.Linq.Stubs.MZipping.FallbackBehavior = global::Microsoft.Stubs.Framework.MoleFallbackBehavior.NotImplemented;
        }

        /// <summary>Assigns the fallback behavior for all methods of the moled type</summary>
        public static global::Microsoft.Stubs.Framework.IMoleBehavior FallbackBehavior
        {
            set
            {
                global::Microsoft.Stubs.Framework.MoleFallbackBehavior.AttachToType(typeof(global::Void.Linq.Zipping), value);
            }
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Zipping.Zip``2(System.Collections.Generic.IEnumerable`1{``0},System.Collections.Generic.IEnumerable`1{``1})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Zip", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void ZipIEnumerable0IEnumerable1<TFirst,TSecond>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<TFirst>, global::System.Collections.Generic.IEnumerable<TSecond>, global::System.Collections.Generic.IEnumerable<global::Void.Linq.Zipping.Pair<TFirst, TSecond>>> mole)
        {
            global::System.Type[] gma = new global::System.Type[2];
            gma[0] = typeof(TFirst);
            gma[1] = typeof(TSecond);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Zipping), "Zip", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<TFirst>), typeof(global::System.Collections.Generic.IEnumerable<TSecond>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Zipping.Zip``3(System.Collections.Generic.IEnumerable`1{``0},System.Collections.Generic.IEnumerable`1{``1},System.Func`3{``0,``1,``2})"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("Zip", global::Microsoft.Stubs.Framework.MoleBindingFlags.PublicStatic)]
        public static void ZipIEnumerable0IEnumerable1Func012<TFirst,TSecond,TResult>(global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<TFirst>, global::System.Collections.Generic.IEnumerable<TSecond>, global::System.Func<TFirst, TSecond, TResult>, global::System.Collections.Generic.IEnumerable<TResult>> mole)
        {
            global::System.Type[] gma = new global::System.Type[3];
            gma[0] = typeof(TFirst);
            gma[1] = typeof(TSecond);
            gma[2] = typeof(TResult);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Zipping), "Zip", 
                gma, typeof(global::System.Collections.Generic.IEnumerable<TFirst>), 
                typeof(global::System.Collections.Generic.IEnumerable<TSecond>), typeof(global::System.Func<TFirst, TSecond, TResult>));
        }

        /// <summary>Sets the mole of <see cref="M:Void.Linq.Zipping.&lt;Zip&gt;b__7``2(``0,``1)"/>
        /// </summary>
        [global::Microsoft.Stubs.Framework.MoleMethod("<Zip>b__7", global::Microsoft.Stubs.Framework.MoleBindingFlags.NonPublicStatic)]
        public static void _Zipb__7TFirstTSecond<TFirst,TSecond>(global::Microsoft.Stubs.Framework.StubDelegates.Func<TFirst, TSecond, global::Void.Linq.Zipping.Pair<TFirst, TSecond>> mole)
        {
            global::System.Type[] gma = new global::System.Type[2];
            gma[0] = typeof(TFirst);
            gma[1] = typeof(TSecond);
            global::Microsoft.Stubs.Framework.MoleRuntime.SetGenericStubNonPublicStatic
                ((global::System.Delegate)mole, typeof(global::Void.Linq.Zipping), "<Zip>b__7", gma, typeof(TFirst), typeof(TSecond));
        }
    }
}
namespace Void.Wrappers.Stubs
{
    /// <summary>Stub type of <see cref="Void.Wrappers.GenericWrapper`1`1"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.StubClass(typeof(global::Void.Wrappers.GenericWrapper<>))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = GenericWrapper`1")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class SGenericWrapper<T01>
      : global::Void.Wrappers.GenericWrapper<T01>
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
    {
        /// <summary>Initializes a new instance</summary>
        public SGenericWrapper(T01 wrapped)
        : base(wrapped)
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            get
            {
                return this.callBase;
            }
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Initializes a new instance of type SGenericWrapper</summary>
        private void InitializeStub()
        {
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior InstanceFallbackBehavior
        {
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent(this.defaultStub);
            }
            set
            {
                this.defaultStub = value;
            }
        }

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
namespace Void.Hierarchies.Stubs
{
    /// <summary>Stub type of <see cref="Void.Hierarchies.IAutoHierarchy`1`1"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.StubClass(typeof(global::Void.Hierarchies.IAutoHierarchy<>))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IAutoHierarchy`1")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class SIAutoHierarchy<T01>
      : global::Microsoft.Stubs.Framework.StubBase
      , global::Void.Hierarchies.IAutoHierarchy<T01>
    {
        /// <summary>Initializes a new instance of type SIAutoHierarchy</summary>
        public SIAutoHierarchy()
        {
        }

        /// <summary>Sets the stub of <see cref="P:Void.Hierarchies.IHierarchy`1`1.Children"/>
        /// </summary>
        global::System.Collections.Generic.IEnumerable<global::Void.Hierarchies.IAutoHierarchy<T01>> global::Void.Hierarchies.IHierarchy<global::Void.Hierarchies.IAutoHierarchy<T01>>.Children
        {
            get
            {
                global::Microsoft.Stubs.Framework
                  .StubDelegates.Func<global::System.Collections.Generic.IEnumerable<global::Void.Hierarchies.IAutoHierarchy<T01>>> sh = this.ChildrenGet;
                if ((object)sh != (object)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.InstanceFallbackBehavior;
                  return stub.Result<global::Void.Hierarchies.Stubs.SIAutoHierarchy<T01>, 
                  global::System.Collections.Generic.IEnumerable<global::Void.Hierarchies.IAutoHierarchy<T01>>>(this);
                }
            }
        }

        /// <summary>Sets the stub of <see cref="P:Void.Hierarchies.IHierarchy`1`1.Children"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<global::Void.Hierarchies.IAutoHierarchy<T01>>> ChildrenGet;

        /// <summary>Sets the stub of <see cref="P:Void.Wrappers.IWrapper`1`1.Wrapped"/>
        /// </summary>
        T01 global::Void.Wrappers.IWrapper<T01>.Wrapped
        {
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<T01> sh = this.WrappedGet;
                if ((object)sh != (object)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.InstanceFallbackBehavior;
                  return stub.Result<global::Void.Hierarchies.Stubs.SIAutoHierarchy<T01>, T01>(this);
                }
            }
        }

        /// <summary>Sets the stub of <see cref="P:Void.Wrappers.IWrapper`1`1.Wrapped"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<T01> WrappedGet;
    }
}
namespace Void.Linq.Stubs
{
    /// <summary>Stub type of <see cref="Void.Linq.IFilter`1`1"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.StubClass(typeof(global::Void.Linq.IFilter<>))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IFilter`1")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class SIFilter<T01>
      : global::Microsoft.Stubs.Framework.StubBase
      , global::Void.Linq.IFilter<T01>
    {
        /// <summary>Initializes a new instance of type SIFilter</summary>
        public SIFilter()
        {
        }

        /// <summary>Sets the stub of <see cref="P:Void.Linq.IFilter`1`1.Filters"/>
        /// </summary>
        global::System.Collections.Generic.IEnumerable<global::System.Linq.Expressions.Expression<global::System.Func<T01, bool>>> global::Void.Linq.IFilter<T01>.Filters
        {
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic
                  .IEnumerable<global::System.Linq.Expressions.Expression<global::System.Func<T01, bool>>>> sh = this.FiltersGet;
                if ((object)sh != (object)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.InstanceFallbackBehavior;
                  return stub.Result<global::Void.Linq.Stubs.SIFilter<T01>, 
                  global::System.Collections.Generic.IEnumerable<global::System.Linq.Expressions.Expression<global::System.Func<T01, bool>>>>(this);
                }
            }
        }

        /// <summary>Sets the stub of <see cref="P:Void.Linq.IFilter`1`1.Filters"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<global::System.Linq.Expressions.Expression<global::System.Func<T01, bool>>>> FiltersGet;
    }
}
namespace Void.Hierarchies.Stubs
{
    /// <summary>Stub type of <see cref="Void.Hierarchies.IHierarchy`1`1"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.StubClass(typeof(global::Void.Hierarchies.IHierarchy<>))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IHierarchy`1")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class SIHierarchy<T01>
      : global::Microsoft.Stubs.Framework.StubBase
      , global::Void.Hierarchies.IHierarchy<T01>
        where T01 : global::Void.Hierarchies.IHierarchy<T01>
    {
        /// <summary>Initializes a new instance of type SIHierarchy</summary>
        public SIHierarchy()
        {
        }

        /// <summary>Sets the stub of <see cref="P:Void.Hierarchies.IHierarchy`1`1.Children"/>
        /// </summary>
        global::System.Collections.Generic.IEnumerable<T01> global::Void.Hierarchies.IHierarchy<T01>.Children
        {
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T01>> sh = this.ChildrenGet;
                if ((object)sh != (object)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.InstanceFallbackBehavior;
                  return stub.Result<global::Void.Hierarchies.Stubs.SIHierarchy<T01>, global::System.Collections.Generic.IEnumerable<T01>>(this);
                }
            }
        }

        /// <summary>Sets the stub of <see cref="P:Void.Hierarchies.IHierarchy`1`1.Children"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<global::System.Collections.Generic.IEnumerable<T01>> ChildrenGet;
    }
}
namespace Void.Stubs
{
    /// <summary>Stub type of <see cref="Void.IPersistentEntity`1`1"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.StubClass(typeof(global::Void.IPersistentEntity<>))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IPersistentEntity`1")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class SIPersistentEntity<TKeyType01>
      : global::Microsoft.Stubs.Framework.StubBase
      , global::Void.IPersistentEntity<TKeyType01>
    {
        /// <summary>Initializes a new instance of type SIPersistentEntity</summary>
        public SIPersistentEntity()
        {
        }

        /// <summary>Sets the stub of <see cref="P:Void.IPersistentEntity`1`1.Id"/>
        /// </summary>
        TKeyType01 global::Void.IPersistentEntity<TKeyType01>.Id
        {
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<TKeyType01> sh = this.IdGet;
                if ((object)sh != (object)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.InstanceFallbackBehavior;
                  return stub.Result<global::Void.Stubs.SIPersistentEntity<TKeyType01>, TKeyType01>(this);
                }
            }
        }

        /// <summary>Sets the stub of <see cref="P:Void.IPersistentEntity`1`1.Id"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<TKeyType01> IdGet;
    }
}
namespace Void.Wrappers.Stubs
{
    /// <summary>Stub type of <see cref="Void.Wrappers.IWrapper`1`1"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.StubClass(typeof(global::Void.Wrappers.IWrapper<>))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = IWrapper`1")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class SIWrapper<T01>
      : global::Microsoft.Stubs.Framework.StubBase
      , global::Void.Wrappers.IWrapper<T01>
    {
        /// <summary>Initializes a new instance of type SIWrapper</summary>
        public SIWrapper()
        {
        }

        /// <summary>Sets the stub of <see cref="P:Void.Wrappers.IWrapper`1`1.Wrapped"/>
        /// </summary>
        T01 global::Void.Wrappers.IWrapper<T01>.Wrapped
        {
            get
            {
                global::Microsoft.Stubs.Framework.StubDelegates.Func<T01> sh = this.WrappedGet;
                if ((object)sh != (object)null)
                  return sh.Invoke();
                else 
                {
                  global::Microsoft.Stubs.Framework.IStubBehavior stub = base.InstanceFallbackBehavior;
                  return stub.Result<global::Void.Wrappers.Stubs.SIWrapper<T01>, T01>(this);
                }
            }
        }

        /// <summary>Sets the stub of <see cref="P:Void.Wrappers.IWrapper`1`1.Wrapped"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<T01> WrappedGet;
    }
}
namespace Void.Stubs
{
    /// <summary>Stub type of <see cref="Void.PersistentEntity`1`1"/>
    /// .</summary>
    [global::Microsoft.Stubs.Framework.StubClass(typeof(global::Void.PersistentEntity<>))]
    [global::System.CodeDom.Compiler.GeneratedCode("Stubs", "0.19.41110.1")]
    [global::System.Serializable]
    [global::System.Diagnostics.DebuggerDisplay("Stub = PersistentEntity`1")]
    [global::System.Diagnostics.DebuggerNonUserCode]
    public partial class SPersistentEntity<TEntity01>
      : global::Void.PersistentEntity<TEntity01>
      , global::Microsoft.Stubs.Framework.IStub
      , global::Microsoft.Stubs.Framework.IPartialStub
        where TEntity01 : global::Void.PersistentEntity<TEntity01>
    {
        /// <summary>Initializes a new instance</summary>
        public SPersistentEntity()
        {
            this.InitializeStub();
        }

        /// <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        public bool CallBase
        {
            get
            {
                return this.callBase;
            }
            set
            {
                this.callBase = value;
            }
        }

        /// <summary>Sets the stub of <see cref="M:Void.PersistentEntity`1`1.Equals(System.Object)"/>
        /// </summary>
        public override bool Equals(object other)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<object, bool> sh = this.EqualsObject;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<object, bool>)null)
              return sh.Invoke(other);
            else 
            {
              if (this.callBase)
                return base.Equals(other);
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.InstanceFallbackBehavior;
              return stub.Result<global::Void.Stubs.SPersistentEntity<TEntity01>, bool>(this);
            }
        }

        /// <summary>Sets the stub of <see cref="M:Void.PersistentEntity`1`1.Equals(`1)"/>
        /// </summary>
        public override bool Equals(TEntity01 other)
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<TEntity01, bool> sh = this.EqualsTEntity;
            if ((object)sh != (object)null)
              return sh.Invoke(other);
            else 
            {
              if (this.callBase)
                return base.Equals(other);
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.InstanceFallbackBehavior;
              return stub.Result<global::Void.Stubs.SPersistentEntity<TEntity01>, bool>(this);
            }
        }

        /// <summary>Sets the stub of <see cref="M:Void.PersistentEntity`1`1.Equals(System.Object)"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<object, bool> EqualsObject;

        /// <summary>Sets the stub of <see cref="M:Void.PersistentEntity`1`1.Equals(`1)"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<TEntity01, bool> EqualsTEntity;

        /// <summary>Sets the stub of <see cref="M:Void.PersistentEntity`1`1.GetHashCode"/>
        /// </summary>
        public override int GetHashCode()
        {
            global::Microsoft.Stubs.Framework.StubDelegates.Func<int> sh = this.PersistentEntityGetHashCode;
            if (sh != (global::Microsoft.Stubs.Framework.StubDelegates.Func<int>)null)
              return sh.Invoke();
            else 
            {
              if (this.callBase)
                return base.GetHashCode();
              global::Microsoft.Stubs.Framework.IStubBehavior stub = this.InstanceFallbackBehavior;
              return stub.Result<global::Void.Stubs.SPersistentEntity<TEntity01>, int>(this);
            }
        }

        /// <summary>Initializes a new instance of type SPersistentEntity</summary>
        private void InitializeStub()
        {
        }

        /// <summary>Gets or sets the fallback behavior.</summary>
        public global::Microsoft.Stubs.Framework.IStubBehavior InstanceFallbackBehavior
        {
            get
            {
                return global::Microsoft.Stubs.Framework.StubFallbackBehavior.GetValueOrCurrent(this.defaultStub);
            }
            set
            {
                this.defaultStub = value;
            }
        }

        /// <summary>Sets the stub of <see cref="M:Void.PersistentEntity`1`1.GetHashCode"/>
        /// </summary>
        public global::Microsoft.Stubs.Framework.StubDelegates.Func<int> PersistentEntityGetHashCode;

        private bool callBase;

        private global::Microsoft.Stubs.Framework.IStubBehavior defaultStub;
    }
}
